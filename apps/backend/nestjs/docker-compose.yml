version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: reactai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: reactai_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - reactai-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: reactai-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - reactai-network

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: reactai-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      API_GATEWAY_PORT: 3000
      AUTH_SERVICE_PORT: 3001
      USER_SERVICE_PORT: 3002
      CHAT_SERVICE_PORT: 3003
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres123
      DATABASE_NAME: reactai_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_SECRET: your-refresh-secret-key
      JWT_REFRESH_EXPIRES_IN: 30d
      CORS_ORIGIN: http://localhost:5173
    depends_on:
      - postgres
      - redis
      - auth-service
      - user-service
      - chat-service
    networks:
      - reactai-network

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    container_name: reactai-auth-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      AUTH_SERVICE_PORT: 3001
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres123
      DATABASE_NAME: reactai_db
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_SECRET: your-refresh-secret-key
      JWT_REFRESH_EXPIRES_IN: 30d
    depends_on:
      - postgres
    networks:
      - reactai-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: apps/user-service/Dockerfile
    container_name: reactai-user-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      USER_SERVICE_PORT: 3002
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres123
      DATABASE_NAME: reactai_db
    depends_on:
      - postgres
    networks:
      - reactai-network

  # Chat Service
  chat-service:
    build:
      context: .
      dockerfile: apps/chat-service/Dockerfile
    container_name: reactai-chat-service
    restart: unless-stopped
    ports:
      - "3003:3003"
      - "3004:3004" # WebSocket port
    environment:
      NODE_ENV: production
      CHAT_SERVICE_PORT: 3003
      WS_PORT: 3004
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres123
      DATABASE_NAME: reactai_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AUTH_SERVICE_PORT: 3001
      USER_SERVICE_PORT: 3002
    depends_on:
      - postgres
      - redis
    networks:
      - reactai-network

volumes:
  postgres_data:
  redis_data:

networks:
  reactai-network:
    driver: bridge